" ------------------------------------------------------------ "
"  This is my personal vim configuration                       "
" ------------------------------------------------------------ "

" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on
filetype plugin on
filetype indent on

" PEP 8 indentation for python
autocmd FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4 textwidth=79 expandtab autoindent fileformat=unix

" Google c++ coding style guideline
autocmd FileType cpp setlocal shiftwidth=2 tabstop=2 softtabstop=2 textwidth=80 expandtab autoindent fileformat=unix

" All file indentation
set shiftwidth=4 tabstop=4 softtabstop=4 textwidth=80 expandtab autoindent fileformat=unix

" Various encondings
set encoding=UTF-8
set fileencodings=utf-8
scriptencoding utf-8

" terminal
set shell=/bin/zsh

" syntax highligh
syntax on

" Enable backspace
set backspace=2

" Line number and line number color
set number relativenumber

" Color of the search both text and background and also incrementally highlight
set hlsearch
set incsearch

" ruler
set ruler
set laststatus=2

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" No words wrap
set nowrap

" Folding method
set foldmethod=syntax
set nofoldenable
set foldlevel=10000000000000000000000
set foldclose=all

" ------------------------------------------------- "
"                   REMAPPING                       "
" ------------------------------------------------- "
" leader as <space>
nnoremap <SPACE> <Nop>
let mapleader=" "

" Copy and paste to system clipboard instead of "+y and 
" "+p I personaly do <leader>y <leader>p remember that vim
" has to be compiled with the option clipboard enable to check it
" just run vim --version
noremap <leader>y "+y
noremap <leader>p "+p
 
" Greatest remap ever
" inoremap <leader>p \_dP

" tab navigation like Firefox.
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabprev<CR>
nnoremap tk  :tabnext<CR>
nnoremap te  :tabedit<Space>
nnoremap tm  :tabm<Space>
nnoremap tn  :tabnew<CR>
nnoremap td  :tabclose<CR>
nnoremap tc  :tab split<CR>
nnoremap t1  :tabnext 1<CR>
nnoremap t2  :tabnext 2<CR>
nnoremap t3  :tabnext 3<CR>
nnoremap t4  :tabnext 4<CR>
nnoremap t5  :tabnext 5<CR>
nnoremap t6  :tabnext 6<CR>
nnoremap t7  :tabnext 7<CR>
nnoremap t8  :tabnext 8<CR>
nnoremap t9  :tabnext 9<CR>

" ------------------------------------------------- "
"                   EXTERNAL PLUGIN                 "
" ------------------------------------------------- "

"call plug#begin('~/.vim/plugged')
"    " Color theme
"    Plug 'NLKNguyen/papercolor-theme'
"    " NERDTree
"    Plug 'preservim/nerdtree'
"    " NERDTree github icons
"    Plug 'Xuyuanp/nerdtree-git-plugin'
"    Plug 'ryanoasis/vim-devicons'
"    " Python Sintax
"    Plug 'vim-python/python-syntax'
"    " DESC: TODO
"    Plug 'tmhedberg/SimpylFold'
"    " Easy Comment
"    Plug 'tpope/vim-commentary'
"    " Indent Highlight for tab indent using space
"    Plug 'Yggdroot/indentLine'
"    " Vim WIKI
"    Plug 'vimwiki/vimwiki'
"    " Lightline
"    Plug 'itchyny/lightline.vim'
"    " Fuzzy Finder for VIM
"    Plug 'junegunn/fzf.vim'
"    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"    " VIM Git Fugitive
"    Plug 'tpope/vim-fugitive'
"call plug#end()
"
"
"" NERDTree Setting
"" REMAPPING
""nnoremap <leader>n :NERDTreeFocus<CR>
"nnoremap <leader>t :NERDTreeToggle<CR>
"" Start NERDTree when Vim is started without file arguments.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
"" Exit Vim if NERDTree is the only window remaining in the only tab.
"autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
"" Set new font
"set guifont=Hack_Nerd_Font:h14
"" Set ICONS
"let g:webdevicons_enable = 1
"let g:webdevicons_enable_nerdtree = 1
"let g:webdevicons_enable_flagship_statusline = 1
"let g:WebDevIconsOS = 'Darwin'
"" Git Status for NERDTree
"let g:NERDTreeGitStatusUseNerdFonts = 1
"let g:python_highlight_all = 0
"
"" Papercolor settings
"set background=light
"set t_Co=256
"let g:lightline = { 'colorscheme': 'PaperColor' }
"let g:PaperColor_Theme_Options = {
"    \   'theme': {
"    \       'default.light': {
"    \           'override' : {
"    \               'linenumber_fg' : ['#d70000', ''],
"    \               'search_bg' : ['#af0000', ''],
"    \               'search_fg' : ['#ffaf00', '']
"    \               }
"    \           }
"    \       }
"    \   }
"
"colorscheme PaperColor
"
"" IndentLine plugin settings
"let g:indentLine_char = '|'
"let g:indentLine_setColors = 0
"let g:indentLine_defaultGroup = 'SpecialKey'
"let g:indentLine_concealcursor = 'inc'
"let g:indentLine_conceallevel = 2
"
"" VimWIKI SETTINGS
"let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.wiki'}]
"let g:vimwiki_ext2syntax = {'.wiki': 'markdown'}
"" let wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'sh': 'sh'}
"let g:vimwiki_hl_headers = 1
"nnoremap tt :VimwikiToggleListItem<CR>
"" let g:vimwiki_listsyms = '✗○◐●✓'
"
"" Lightline settings
"let g:lightline = {
"    \ 'colorscheme': 'PaperColor',
"    \ 'active': {
"    \   'left': [ [ 'mode', 'paste' ],
"    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
"    \ },
"    \ 'component_function': {
"    \   'gitbranch': 'FugitiveHead'
"    \ },
"    \ }
"
"" python-syntax settings
"let g:python_highlight_all = 1
"let g:python_highlight_indent_errors = 0
"let g:python_highlight_space_errors = 0
"
"" Fuzzy Finder Remaps
"nnoremap <silent> <leader>ff :Files<CR>
"nnoremap <silent> <leader>pf :GFiles<CR>
"nnoremap <silent> <leader>gr :Rg<Cr>
"" Customize fzf colors to match your color scheme - fzf#wrap translates this to a set of `--color` options
"let g:fzf_colors ={ 
"    \ 'fg':      ['fg', 'Normal'],
"    \ 'bg':      ['bg', 'Normal'],
"    \ 'hl':      ['fg', 'Comment'],
"    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"    \ 'hl+':     ['fg', 'Statement'],
"    \ 'info':    ['fg', 'PreProc'],
"    \ 'border':  ['fg', 'Ignore'],
"    \ 'prompt':  ['fg', 'Conditional'],
"    \ 'pointer': ['fg', 'Exception'],
"    \ 'marker':  ['fg', 'Keyword'],
"    \ 'spinner': ['fg', 'Label'],
"    \ 'header':  ['fg', 'Comment'] 
"    \ }

