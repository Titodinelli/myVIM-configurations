" ------------------------------------------------------------ "
"  This is my personal vim configuration                       "
" ------------------------------------------------------------ "

" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on
filetype plugin on
filetype indent on

" Various encondings
set encoding=UTF-8
set fileencodings=utf-8
scriptencoding utf-8

" terminal
set shell=/bin/zsh

" syntax highligh
syntax on

" Enable backspace
set backspace=2

" Line number and line number color
set number relativenumber

set termguicolors
set guifont=font-hack-nerd-font
set number
set relativenumber

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent

set nowrap

set noswapfile
set nobackup

set nohlsearch
set incsearch

set scrolloff=8
set signcolumn=yes
set isfname+=@-@

set updatetime=50
set list
set listchars=tab:\ \ ,eol:â†µ

" set bash like file autocompletion
set wildmode=longest,list,full
set wildmenu

" Folding method
set foldcolumn=0
set foldlevel=100
set foldlevelstart=99
set foldenable

" ------------------------------------------------- "
"                   REMAPPING                       "
" ------------------------------------------------- "
" leader as <space>
nnoremap <SPACE> <Nop>
let mapleader=" "

" Set <leader> key to space
let mapleader = " "

" netrw options
let g:netrw_liststyle = 0
let g:netrw_winsize = 30
nnoremap <leader>tv :Lexplore<CR>
nnoremap <leader>pv :Ex<CR>

" Move around stuff when in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Ctrl-d is half page jumping these two commands allow staying always in the middle
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" This allows search term to stay in the middle
nnoremap n nzzzv
nnoremap N Nzzzv

" Greatest remap ever (paste without updating the internal registry)
xnoremap <leader>p "_dP

" Copy the selection in the external registry
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+Y

" Delete the selection without pasting it in the internal registry
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" If I am gonna press leader s it gives me the possibility to change the word I am on
nnoremap <leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left><CR>

" Run Python file
nnoremap <leader>rp :term python %<CR>

" TAB remapping. (Don't know if needed again)
nnoremap th :tabfirst<CR>
nnoremap tj :tabprev<CR>
nnoremap tk :tabnext<CR>
nnoremap te :tabedit<Space><CR>
nnoremap tm :tabm<Space><CR>
nnoremap tn :tabnew<CR>
nnoremap tc :tabclose<CR>
nnoremap t1 :tabnext 1<CR>
nnoremap t2 :tabnext 2<CR>
nnoremap t3 :tabnext 3<CR>
nnoremap t4 :tabnext 4<CR>

" ------------------------------------------------- "
"                   EXTERNAL PLUGIN                 "
" ------------------------------------------------- "

call plug#begin('~/.vim/plugged')
   " Color theme
   Plug 'NLKNguyen/papercolor-theme'
   " Easy Comment
   Plug 'tpope/vim-commentary'
   " Indent Highlight for tab indent using space
   Plug 'Yggdroot/indentLine'
   " Lightline
   Plug 'itchyny/lightline.vim'
   " Fuzzy Finder for VIM
   Plug 'junegunn/fzf.vim'
   Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
   " VIM Git Fugitive
   Plug 'tpope/vim-fugitive'
call plug#end()

" Papercolor settings
set background=light
set t_Co=256
let g:lightline = { 'colorscheme': 'PaperColor' }
let g:PaperColor_Theme_Options = {
   \   'theme': {
   \       'default.light': {
   \           'override' : {
   \               'linenumber_fg' : ['#d70000', ''],
   \               'search_bg' : ['#af0000', ''],
   \               'search_fg' : ['#ffaf00', '']
   \               }
   \           }
   \       }
   \   }

colorscheme PaperColor

" IndentLine plugin settings
let g:indentLine_char = '|'
let g:indentLine_setColors = 0
let g:indentLine_defaultGroup = 'SpecialKey'
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2

" Lightline settings
let g:lightline = {
   \ 'colorscheme': 'PaperColor',
   \ 'active': {
   \   'left': [ [ 'mode', 'paste' ],
   \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
   \ },
   \ 'component_function': {
   \   'gitbranch': 'FugitiveHead'
   \ },
   \ }

" Fuzzy Finder Remaps
nnoremap <silent> <leader>ff :Files<CR>
nnoremap <silent> <leader>pf :GFiles<CR>
nnoremap <silent> <leader>gr :Rg<Cr>
" Customize fzf colors to match your color scheme - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors ={ 
   \ 'fg':      ['fg', 'Normal'],
   \ 'bg':      ['bg', 'Normal'],
   \ 'hl':      ['fg', 'Comment'],
   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
   \ 'hl+':     ['fg', 'Statement'],
   \ 'info':    ['fg', 'PreProc'],
   \ 'border':  ['fg', 'Ignore'],
   \ 'prompt':  ['fg', 'Conditional'],
   \ 'pointer': ['fg', 'Exception'],
   \ 'marker':  ['fg', 'Keyword'],
   \ 'spinner': ['fg', 'Label'],
   \ 'header':  ['fg', 'Comment'] 
   \ }
